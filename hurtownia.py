import tkinter as tk
from tkinter import filedialog, simpledialog, messagebox, Scrollbar, ttk
import pandas as pd
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
import seaborn as sns


class DataWarehouseApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Projekt Hurtownie Danych - Mateusz Florian")
        self.root.geometry("1400x900")
        self.df = None
        self.original_df = None  # Kopia oryginalnych danych
        self.dark_mode = False

        # Kolory dla motyw√≥w
        self.themes = {
            'light': {
                'bg': '#ffffff',
                'fg': '#000000',
                'select_bg': '#0078d4',
                'select_fg': '#ffffff',
                'button_bg': '#f0f0f0',
                'entry_bg': '#ffffff',
                'text_bg': '#ffffff'
            },
            'dark': {
                'bg': '#2d2d2d',
                'fg': '#ffffff',
                'select_bg': '#404040',
                'select_fg': '#ffffff',
                'button_bg': '#404040',
                'entry_bg': '#404040',
                'text_bg': '#1e1e1e'
            }
        }

        self.create_widgets()
        self.apply_theme()

    def create_widgets(self):
        # Menu
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)

        # Menu Widok
        view_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Widok", menu=view_menu)
        view_menu.add_command(label="Prze≈ÇƒÖcz motyw", command=self.toggle_theme)

        # G≈Ç√≥wny frame
        main_frame = tk.Frame(self.root)
        main_frame.pack(fill="both", expand=True)

        # Frame na przyciski
        button_frame = tk.Frame(main_frame)
        button_frame.pack(pady=10)

        # Pierwsza linia przycisk√≥w
        tk.Button(button_frame, text="üìÇ Wybierz plik CSV", width=20, command=self.load_csv).grid(row=0, column=0,
                                                                                                 padx=3, pady=3)
        tk.Button(button_frame, text="üìä Poka≈º statystyki", width=20, command=self.show_statistics).grid(row=0, column=1,
                                                                                                        padx=3, pady=3)
        tk.Button(button_frame, text="üîó Oblicz korelacjƒô", width=20, command=self.calculate_correlation).grid(row=0,
                                                                                                              column=2,
                                                                                                              padx=3,
                                                                                                              pady=3)
        tk.Button(button_frame, text="üìà Wykres kolumny", width=20, command=self.plot_column).grid(row=0, column=3,
                                                                                                  padx=3, pady=3)

        # Druga linia przycisk√≥w
        tk.Button(button_frame, text="üóÇÔ∏è Wyodrƒôbnij podtabelƒô", width=20, command=self.extract_subtable).grid(row=1,
                                                                                                              column=0,
                                                                                                              padx=3,
                                                                                                              pady=3)
        tk.Button(button_frame, text="üîÑ Zamie≈Ñ warto≈õci", width=20, command=self.replace_values).grid(row=1, column=1,
                                                                                                      padx=3, pady=3)
        tk.Button(button_frame, text="üíæ Zapisz do CSV", width=20, command=self.save_to_csv).grid(row=1, column=2,
                                                                                                 padx=3, pady=3)
        tk.Button(button_frame, text="‚Ü©Ô∏è Wr√≥ƒá do widoku danych", width=20, command=self.show_data).grid(row=1, column=3,
                                                                                                        padx=3, pady=3)

        # Trzecia linia przycisk√≥w - nowe funkcje
        tk.Button(button_frame, text="üîç Filtruj dane", width=20, command=self.filter_data).grid(row=2, column=0, padx=3,
                                                                                                pady=3)
        tk.Button(button_frame, text="‚ö†Ô∏è Wykryj outliery", width=20, command=self.detect_outliers).grid(row=2, column=1,
                                                                                                        padx=3, pady=3)
        tk.Button(button_frame, text="‚ùì Analiza brak√≥w", width=20, command=self.analyze_missing_data).grid(row=2,
                                                                                                           column=2,
                                                                                                           padx=3,
                                                                                                           pady=3)
        tk.Button(button_frame, text="üîÑ Resetuj filtr", width=20, command=self.reset_filter).grid(row=2, column=3,
                                                                                                  padx=3, pady=3)

        # Frame na dane z suwakami
        text_frame = tk.Frame(main_frame)
        text_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # Suwak pionowy
        self.scroll_y = Scrollbar(text_frame, orient="vertical")
        self.scroll_y.pack(side="right", fill="y")

        # Suwak poziomy
        self.scroll_x = Scrollbar(text_frame, orient="horizontal")
        self.scroll_x.pack(side="bottom", fill="x")

        # Tekst z wy≈ÇƒÖczonym zawijaniem
        self.text = tk.Text(text_frame, wrap="none",
                            yscrollcommand=self.scroll_y.set,
                            xscrollcommand=self.scroll_x.set,
                            font=("Consolas", 10))
        self.text.pack(side="left", fill="both", expand=True)

        # Konfiguracja suwak√≥w
        self.scroll_y.configure(command=self.text.yview)
        self.scroll_x.configure(command=self.text.xview)

        # WiƒÖzanie dwukliku dla edycji kom√≥rek
        self.text.bind("<Double-Button-1>", self.on_double_click)

        # Zmienne do ≈õledzenia struktury tabeli
        self.table_start_line = None
        self.column_positions = []
        self.row_positions = []

        # Status bar
        self.status_frame = tk.Frame(main_frame)
        self.status_frame.pack(side="bottom", fill="x", pady=(5, 0))

        self.status_label = tk.Label(self.status_frame, text="Gotowy do pracy",
                                     relief="sunken", anchor="w")
        self.status_label.pack(side="left", fill="x", expand=True)

        self.info_label = tk.Label(self.status_frame, text="",
                                   relief="sunken", anchor="e", width=30)
        self.info_label.pack(side="right")

        # Przechowywanie referencji do element√≥w interfejsu
        self.ui_elements = [
            button_frame, text_frame, self.text, self.scroll_y, self.scroll_x,
            self.status_frame, self.status_label, self.info_label
        ]

    def apply_theme(self):
        """Aplikuje wybrany motyw kolorystyczny"""
        theme = self.themes['dark' if self.dark_mode else 'light']

        # G≈Ç√≥wne okno
        self.root.configure(bg=theme['bg'])

        # Konfiguracja wszystkich frame'√≥w
        for widget in self.root.winfo_children():
            self.configure_widget_theme(widget, theme)

    def configure_widget_theme(self, widget, theme):
        """Rekurencyjnie konfiguruje motyw dla widget'a i jego dzieci"""
        try:
            widget_class = widget.winfo_class()

            if widget_class == 'Frame':
                widget.configure(bg=theme['bg'])
            elif widget_class == 'Button':
                widget.configure(bg=theme['button_bg'], fg=theme['fg'],
                                 activebackground=theme['select_bg'],
                                 activeforeground=theme['select_fg'])
            elif widget_class == 'Label':
                widget.configure(bg=theme['bg'], fg=theme['fg'])
            elif widget_class == 'Text':
                widget.configure(bg=theme['text_bg'], fg=theme['fg'],
                                 insertbackground=theme['fg'],
                                 selectbackground=theme['select_bg'],
                                 selectforeground=theme['select_fg'])
            elif widget_class == 'Scrollbar':
                widget.configure(bg=theme['button_bg'],
                                 troughcolor=theme['bg'],
                                 activebackground=theme['select_bg'])
        except tk.TclError:
            pass

        # Rekurencyjnie dla dzieci
        for child in widget.winfo_children():
            self.configure_widget_theme(child, theme)

    def toggle_theme(self):
        """Prze≈ÇƒÖcza miƒôdzy motywem jasnym a ciemnym"""
        self.dark_mode = not self.dark_mode
        self.apply_theme()
        self.update_status(f"Prze≈ÇƒÖczono na motyw {'ciemny' if self.dark_mode else 'jasny'}")

    def update_status(self, message, info=""):
        """Aktualizuje status bar"""
        self.status_label.config(text=message)
        if info:
            self.info_label.config(text=info)

    def update_data_info(self):
        """Aktualizuje informacje o danych w status bar"""
        if self.df is not None:
            rows, cols = self.df.shape
            info = f"Wiersze: {rows} | Kolumny: {cols}"
            if self.original_df is not None and len(self.df) != len(self.original_df):
                info += f" | Filtrowane z {len(self.original_df)}"
            self.info_label.config(text=info)

    def load_csv(self):
        file_path = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
        if file_path:
            try:
                self.df = pd.read_csv(file_path, sep=';')
                self.original_df = self.df.copy()  # Kopia orygina≈Çu
                self.show_data()
                self.update_status("Plik CSV zosta≈Ç pomy≈õlnie wczytany")
                self.update_data_info()
                messagebox.showinfo("Sukces", "Plik CSV zosta≈Ç pomy≈õlnie wczytany.")
            except Exception as e:
                self.update_status("B≈ÇƒÖd wczytywania pliku")
                messagebox.showerror("B≈ÇƒÖd", f"Nie uda≈Ço siƒô wczytaƒá pliku CSV: {e}")

    def show_data(self):
        if self.df is None:
            messagebox.showerror("B≈ÇƒÖd", "Brak wczytanego pliku CSV.")
            return

        self.text.delete('1.0', tk.END)
        table_content = f"PodglƒÖd danych:\n{self.df.to_string(index=False)}\n"
        self.text.insert(tk.END, table_content)

        # Zapisz pozycje dla edycji kom√≥rek
        self.parse_table_structure()
        self.update_status("Wy≈õwietlono dane")

    def show_statistics(self):
        if self.df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj plik CSV.")
            return

        desc = self.df.describe(include='all')
        self.text.delete('1.0', tk.END)
        self.text.insert(tk.END, f"Statystyki tabeli:\n{desc.to_string()}\n")
        self.update_status("Wy≈õwietlono statystyki tabeli")
        messagebox.showinfo("Info", "Wy≈õwietlono statystyki tabeli.")

    def calculate_correlation(self):
        if self.df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj plik CSV.")
            return

        numeric_df = self.df.select_dtypes(include=[np.number])
        if numeric_df.empty:
            messagebox.showerror("B≈ÇƒÖd", "Brak danych numerycznych w zbiorze.")
            return

        correlation = numeric_df.corr(method='pearson')
        self.text.delete('1.0', tk.END)
        self.text.insert(tk.END, f"Macierz korelacji:\n{correlation.to_string()}\n")

        # Wykres korelacji
        plt.figure(figsize=(10, 8))
        sns.heatmap(correlation, annot=True, cmap='coolwarm')
        plt.title('Macierz Korelacji')
        plt.show()

        self.update_status("Wy≈õwietlono macierz korelacji")
        messagebox.showinfo("Info", "Wy≈õwietlono macierz korelacji i wykres.")

    def plot_column(self):
        if self.df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj plik CSV.")
            return

        column = simpledialog.askstring("Wykres kolumny", "Podaj nazwƒô kolumny do wykresu:")

        if column not in self.df.columns:
            messagebox.showerror("B≈ÇƒÖd", "Podano nieprawid≈ÇowƒÖ kolumnƒô.")
            return

        try:
            plt.figure(figsize=(10, 6))
            self.df[column].value_counts().plot(kind='bar', color='skyblue')
            plt.title(f"Wykres s≈Çupkowy dla kolumny: {column}")
            plt.xlabel(column)
            plt.ylabel("Liczba wystƒÖpie≈Ñ")
            plt.xticks(rotation=45)
            plt.tight_layout()
            plt.show()

            self.update_status(f"Wy≈õwietlono wykres dla kolumny: {column}")
            messagebox.showinfo("Sukces", f"Wy≈õwietlono wykres dla kolumny: {column}")
        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"Nie uda≈Ço siƒô utworzyƒá wykresu: {e}")

    def filter_data(self):
        """Filtrowanie danych wed≈Çug warto≈õci w kolumnie"""
        if self.df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj plik CSV.")
            return

        # Okno dialogowe do filtrowania
        filter_window = tk.Toplevel(self.root)
        filter_window.title("Filtrowanie danych")
        filter_window.geometry("400x300")

        # Wyb√≥r kolumny
        tk.Label(filter_window, text="Wybierz kolumnƒô:").pack(pady=5)
        column_var = tk.StringVar()
        column_combo = ttk.Combobox(filter_window, textvariable=column_var,
                                    values=list(self.df.columns), state="readonly")
        column_combo.pack(pady=5)

        # Typ filtra
        tk.Label(filter_window, text="Typ filtra:").pack(pady=5)
        filter_type = tk.StringVar(value="r√≥wna siƒô")
        filter_combo = ttk.Combobox(filter_window, textvariable=filter_type,
                                    values=["r√≥wna siƒô", "zawiera", "wiƒôksze ni≈º", "mniejsze ni≈º", "nie r√≥wna siƒô"],
                                    state="readonly")
        filter_combo.pack(pady=5)

        # Warto≈õƒá do filtrowania
        tk.Label(filter_window, text="Warto≈õƒá:").pack(pady=5)
        value_var = tk.StringVar()
        value_entry = tk.Entry(filter_window, textvariable=value_var, width=30)
        value_entry.pack(pady=5)

        def apply_filter():
            column = column_var.get()
            filter_op = filter_type.get()
            value = value_var.get()

            if not column or not value:
                messagebox.showerror("B≈ÇƒÖd", "Wype≈Çnij wszystkie pola.")
                return

            try:
                if filter_op == "r√≥wna siƒô":
                    filtered_df = self.original_df[self.original_df[column].astype(str) == value]
                elif filter_op == "zawiera":
                    filtered_df = self.original_df[self.original_df[column].astype(str).str.contains(value, na=False)]
                elif filter_op == "nie r√≥wna siƒô":
                    filtered_df = self.original_df[self.original_df[column].astype(str) != value]
                elif filter_op == "wiƒôksze ni≈º":
                    filtered_df = self.original_df[
                        pd.to_numeric(self.original_df[column], errors='coerce') > float(value)]
                elif filter_op == "mniejsze ni≈º":
                    filtered_df = self.original_df[
                        pd.to_numeric(self.original_df[column], errors='coerce') < float(value)]

                self.df = filtered_df
                self.show_data()
                self.update_data_info()
                self.update_status(f"Zastosowano filtr: {column} {filter_op} {value}")
                filter_window.destroy()

            except Exception as e:
                messagebox.showerror("B≈ÇƒÖd", f"Nie uda≈Ço siƒô zastosowaƒá filtra: {e}")

        tk.Button(filter_window, text="Zastosuj filtr", command=apply_filter).pack(pady=10)
        tk.Button(filter_window, text="Anuluj", command=filter_window.destroy).pack(pady=5)

    def reset_filter(self):
        """Resetuje filtr i przywraca oryginalne dane"""
        if self.original_df is not None:
            self.df = self.original_df.copy()
            self.show_data()
            self.update_data_info()
            self.update_status("Zresetowano filtr - przywr√≥cono wszystkie dane")
        else:
            messagebox.showinfo("Info", "Brak danych do przywr√≥cenia.")

    def detect_outliers(self):
        """Wykrywa outliery w danych numerycznych"""
        if self.df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj plik CSV.")
            return

        numeric_columns = self.df.select_dtypes(include=[np.number]).columns
        if len(numeric_columns) == 0:
            messagebox.showerror("B≈ÇƒÖd", "Brak kolumn numerycznych do analizy outlier√≥w.")
            return

        outliers_info = []

        for col in numeric_columns:
            # Metoda IQR (Interquartile Range)
            Q1 = self.df[col].quantile(0.25)
            Q3 = self.df[col].quantile(0.75)
            IQR = Q3 - Q1
            lower_bound = Q1 - 1.5 * IQR
            upper_bound = Q3 + 1.5 * IQR

            outliers = self.df[(self.df[col] < lower_bound) | (self.df[col] > upper_bound)]

            if not outliers.empty:
                outliers_info.append(f"\n--- Kolumna: {col} ---")
                outliers_info.append(f"Granice: {lower_bound:.2f} - {upper_bound:.2f}")
                outliers_info.append(f"Liczba outlier√≥w: {len(outliers)}")
                outliers_info.append(f"Warto≈õci outlier√≥w: {outliers[col].tolist()}")

                # Z-score method jako dodatkowa informacja
                z_scores = np.abs(stats.zscore(self.df[col].dropna()))
                z_outliers = len(z_scores[z_scores > 3])
                outliers_info.append(f"Outliery (Z-score > 3): {z_outliers}")

        if outliers_info:
            result = "ANALIZA OUTLIER√ìW:\n" + "\n".join(outliers_info)
            self.text.delete('1.0', tk.END)
            self.text.insert(tk.END, result)
            self.update_status("Przeprowadzono analizƒô outlier√≥w")
        else:
            self.text.delete('1.0', tk.END)
            self.text.insert(tk.END, "ANALIZA OUTLIER√ìW:\n\nNie znaleziono outlier√≥w w danych numerycznych.")
            self.update_status("Nie znaleziono outlier√≥w")

    def analyze_missing_data(self):
        """Analizuje brakujƒÖce dane"""
        if self.df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj plik CSV.")
            return

        missing_analysis = []
        missing_analysis.append("ANALIZA BRAKUJƒÑCYCH DANYCH:\n")

        # Og√≥lne statystyki
        total_cells = self.df.size
        missing_cells = self.df.isnull().sum().sum()
        missing_percentage = (missing_cells / total_cells) * 100

        missing_analysis.append(f"Ca≈Çkowita liczba kom√≥rek: {total_cells}")
        missing_analysis.append(f"BrakujƒÖce kom√≥rki: {missing_cells}")
        missing_analysis.append(f"Procent brakujƒÖcych danych: {missing_percentage:.2f}%\n")

        # Analiza per kolumna
        missing_analysis.append("BRAKUJƒÑCE DANE PER KOLUMNA:")
        missing_analysis.append("-" * 50)

        for col in self.df.columns:
            missing_count = self.df[col].isnull().sum()
            missing_pct = (missing_count / len(self.df)) * 100
            data_type = str(self.df[col].dtype)

            missing_analysis.append(f"{col}:")
            missing_analysis.append(f"  - Typ danych: {data_type}")
            missing_analysis.append(f"  - BrakujƒÖce warto≈õci: {missing_count}")
            missing_analysis.append(f"  - Procent brakujƒÖcych: {missing_pct:.2f}%")

            if missing_count > 0:
                # Indeksy wierszy z brakujƒÖcymi danymi
                missing_indices = self.df[self.df[col].isnull()].index.tolist()
                missing_analysis.append(
                    f"  - Indeksy z brakami: {missing_indices[:10]}{'...' if len(missing_indices) > 10 else ''}")

            missing_analysis.append("")

        # Wiersze z najwiƒôkszƒÖ liczbƒÖ brak√≥w
        missing_per_row = self.df.isnull().sum(axis=1)
        worst_rows = missing_per_row.nlargest(5)

        if worst_rows.max() > 0:
            missing_analysis.append("WIERSZE Z NAJWIƒòKSZƒÑ LICZBƒÑ BRAK√ìW:")
            missing_analysis.append("-" * 40)
            for idx, missing_count in worst_rows.items():
                if missing_count > 0:
                    missing_analysis.append(f"Wiersz {idx}: {missing_count} brakujƒÖcych warto≈õci")

        # Wzorce brakujƒÖcych danych
        if missing_cells > 0:
            missing_analysis.append("\nWZORCE BRAKUJƒÑCYCH DANYCH:")
            missing_analysis.append("-" * 30)
            missing_combinations = self.df.isnull().value_counts().head(5)
            for pattern, count in missing_combinations.items():
                missing_cols = [col for col, is_missing in zip(self.df.columns, pattern) if is_missing]
                if missing_cols:
                    missing_analysis.append(f"Braki w kolumnach {missing_cols}: {count} wierszy")

        result = "\n".join(missing_analysis)
        self.text.delete('1.0', tk.END)
        self.text.insert(tk.END, result)
        self.update_status("Przeprowadzono analizƒô brakujƒÖcych danych")

    def extract_subtable(self):
        if self.df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj plik CSV.")
            return

        choice = simpledialog.askstring("Podtabela",
                                        "Podaj numery wierszy (np. 0,2,4) lub nazwy kolumn (np. Kolumna1,Kolumna2):")
        if not choice:
            return

        try:
            if all(item.strip().isdigit() for item in choice.split(',')):
                rows = [int(i.strip()) for i in choice.split(',')]
                subtable = self.df.iloc[rows]
            else:
                cols = [col.strip() for col in choice.split(',')]
                for col in cols:
                    if col not in self.df.columns:
                        messagebox.showerror("B≈ÇƒÖd", f"Kolumna '{col}' nie istnieje.")
                        return
                subtable = self.df[cols]

            self.text.delete('1.0', tk.END)
            self.text.insert(tk.END, f"Wyodrƒôbniona podtabela:\n{subtable.to_string(index=False)}\n")
            self.update_status("Wyodrƒôbniono podtabelƒô")
            messagebox.showinfo("Info", "Podtabela zosta≈Ça wyodrƒôbniona.")
        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"Co≈õ posz≈Ço nie tak: {e}")

    def replace_values(self):
        if self.df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj plik CSV.")
            return

        column = simpledialog.askstring("Zamiana warto≈õci", "Podaj nazwƒô kolumny:")
        if column not in self.df.columns:
            messagebox.showerror("B≈ÇƒÖd", "Podano nieprawid≈ÇowƒÖ kolumnƒô.")
            return

        old_value = simpledialog.askstring("Zamiana warto≈õci", "Podaj warto≈õƒá do zamiany:")
        new_value = simpledialog.askstring("Zamiana warto≈õci", "Podaj nowƒÖ warto≈õƒá:")

        if old_value is None or new_value is None:
            return

        try:
            # Pr√≥ba konwersji do liczby
            if pd.api.types.is_numeric_dtype(self.df[column]):
                old_value = pd.to_numeric(old_value, errors='coerce')
                new_value = pd.to_numeric(new_value, errors='coerce')

            # Zamiana warto≈õci
            self.df[column] = self.df[column].replace(old_value, new_value)

            self.text.delete('1.0', tk.END)
            self.text.insert(tk.END, f"Zamieniono '{old_value}' na '{new_value}' w kolumnie '{column}'.\n")
            self.show_data()
            self.update_status(f"Zamieniono warto≈õci w kolumnie {column}")
            messagebox.showinfo("Sukces", "Warto≈õci zosta≈Çy pomy≈õlnie zamienione.")
        except Exception as e:
            messagebox.showerror("B≈ÇƒÖd", f"Nie uda≈Ço siƒô zamieniƒá warto≈õci: {e}")

    def save_to_csv(self):
        if self.df is None:
            messagebox.showerror("B≈ÇƒÖd", "Najpierw wczytaj plik CSV.")
            return

        save_path = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV Files", "*.csv")])
        if save_path:
            try:
                self.df.to_csv(save_path, index=False, sep=';')
                self.update_status(f"Zapisano plik: {save_path}")
                messagebox.showinfo("Sukces", f"Plik zosta≈Ç zapisany jako: {save_path}")
            except Exception as e:
                messagebox.showerror("B≈ÇƒÖd", f"Nie uda≈Ço siƒô zapisaƒá pliku: {e}")

    def parse_table_structure(self):
        """Analizuje strukturƒô tabeli w widgecie Text dla edycji kom√≥rek"""
        content = self.text.get('1.0', tk.END)
        lines = content.split('\n')

        # Znajd≈∫ liniƒô z nag≈Ç√≥wkami (pierwsza linia po "PodglƒÖd danych:")
        header_line_idx = None
        for i, line in enumerate(lines):
            if line.strip() and not line.startswith("PodglƒÖd danych:") and line.strip() != "":
                header_line_idx = i
                break

        if header_line_idx is None:
            return

        self.table_start_line = header_line_idx + 1  # +1 bo tkinter numeruje od 1

        # Analizuj pozycje kolumn na podstawie nag≈Ç√≥wk√≥w
        header_line = lines[header_line_idx]
        self.column_positions = []

        # Znajd≈∫ kolumny DataFrame
        if self.df is not None:
            # U≈ºywamy to_string() ≈ºeby uzyskaƒá identycznƒÖ strukturƒô
            table_str = self.df.to_string(index=False)
            table_lines = table_str.split('\n')

            if len(table_lines) > 0:
                header = table_lines[0]

                # Znajd≈∫ pozycje kolumn
                current_pos = 0
                for col_name in self.df.columns:
                    col_pos = header.find(col_name, current_pos)
                    if col_pos != -1:
                        col_end = col_pos + len(str(col_name))
                        # Znajd≈∫ koniec danych kolumny (nastƒôpna kolumna lub koniec linii)
                        next_col_pos = len(header)
                        for next_col in self.df.columns[list(self.df.columns).index(col_name) + 1:]:
                            next_pos = header.find(next_col, col_end)
                            if next_pos != -1:
                                next_col_pos = next_pos
                                break

                        self.column_positions.append({
                            'name': col_name,
                            'start': col_pos,
                            'end': next_col_pos,
                            'header_end': col_end
                        })
                        current_pos = col_end

    def on_double_click(self, event):
        """Obs≈Çuguje dwuklik na kom√≥rce dla edycji"""
        if self.df is None or not self.column_positions:
            return

        # Pobierz pozycjƒô kursora
        cursor_pos = self.text.index(tk.INSERT)
        line_num = int(cursor_pos.split('.')[0])
        char_num = int(cursor_pos.split('.')[1])

        # Sprawd≈∫ czy klik by≈Ç w obszarze tabeli
        if self.table_start_line is None or line_num <= self.table_start_line:
            return

        # Oblicz wiersz danych (pomijajƒÖc nag≈Ç√≥wek)
        data_row = line_num - self.table_start_line - 1

        if data_row < 0 or data_row >= len(self.df):
            return

        # Znajd≈∫ kolumnƒô na podstawie pozycji znaku
        selected_column = None
        col_index = None

        for i, col_info in enumerate(self.column_positions):
            if col_info['start'] <= char_num < col_info['end']:
                selected_column = col_info['name']
                col_index = i
                break

        if selected_column is None:
            return

        # Pobierz aktualnƒÖ warto≈õƒá
        current_value = self.df.iloc[data_row, col_index]

        # Utw√≥rz okno edycji
        self.create_cell_editor(data_row, col_index, selected_column, current_value,
                                line_num, col_info['start'], col_info['end'])

    def create_cell_editor(self, row_idx, col_idx, col_name, current_value,
                           text_line, col_start, col_end):
        """Tworzy okno edycji dla pojedynczej kom√≥rki"""
        editor = tk.Toplevel(self.root)
        editor.title(f"Edycja kom√≥rki [{row_idx}, {col_name}]")
        editor.geometry("400x200")
        editor.transient(self.root)
        editor.grab_set()

        # Informacje o kom√≥rce
        info_frame = tk.Frame(editor)
        info_frame.pack(pady=10, padx=10, fill="x")

        tk.Label(info_frame, text=f"Wiersz: {row_idx}", font=("Arial", 9)).pack(anchor="w")
        tk.Label(info_frame, text=f"Kolumna: {col_name}", font=("Arial", 9)).pack(anchor="w")
        tk.Label(info_frame, text=f"Typ danych: {str(self.df[col_name].dtype)}", font=("Arial", 9)).pack(anchor="w")

        # Pole edycji
        tk.Label(editor, text="Nowa warto≈õƒá:", font=("Arial", 10, "bold")).pack(pady=(10, 5))

        entry_var = tk.StringVar(value=str(current_value) if pd.notna(current_value) else "")
        entry = tk.Entry(editor, textvariable=entry_var, font=("Arial", 11), width=40)
        entry.pack(pady=5, padx=10)
        entry.focus_set()
        entry.select_range(0, tk.END)

        # Przyciski
        button_frame = tk.Frame(editor)
        button_frame.pack(pady=20)

        def save_changes():
            new_value = entry_var.get()

            try:
                # Pr√≥ba konwersji do odpowiedniego typu
                if pd.api.types.is_numeric_dtype(self.df[col_name]):
                    if new_value.strip() == "":
                        converted_value = np.nan
                    else:
                        converted_value = pd.to_numeric(new_value)
                elif pd.api.types.is_datetime64_any_dtype(self.df[col_name]):
                    if new_value.strip() == "":
                        converted_value = pd.NaT
                    else:
                        converted_value = pd.to_datetime(new_value)
                else:
                    converted_value = new_value if new_value.strip() != "" else np.nan

                # Zapisz zmianƒô
                old_value = self.df.iloc[row_idx, col_idx]
                self.df.iloc[row_idx, col_idx] = converted_value

                # Od≈õwie≈º widok
                self.show_data()
                self.update_data_info()

                # Aktualizuj status
                self.update_status(f"Zmieniono kom√≥rkƒô [{row_idx}, {col_name}]: '{old_value}' ‚Üí '{converted_value}'")

                editor.destroy()

            except Exception as e:
                messagebox.showerror("B≈ÇƒÖd konwersji",
                                     f"Nie mo≈ºna przekonwertowaƒá warto≈õci '{new_value}' "
                                     f"na typ {self.df[col_name].dtype}:\n{str(e)}")

        def cancel_changes():
            editor.destroy()

        # WiƒÖzanie Enter dla zapisania
        entry.bind('<Return>', lambda e: save_changes())
        entry.bind('<KP_Enter>', lambda e: save_changes())
        editor.bind('<Escape>', lambda e: cancel_changes())

        tk.Button(button_frame, text="üíæ Zapisz", command=save_changes,
                  width=12, bg="#4CAF50", fg="white").pack(side="left", padx=5)
        tk.Button(button_frame, text="‚ùå Anuluj", command=cancel_changes,
                  width=12, bg="#f44336", fg="white").pack(side="left", padx=5)

        # Dodatkowe informacje
        help_frame = tk.Frame(editor)
        help_frame.pack(pady=5, padx=10, fill="x")

        help_text = "üí° Naci≈õnij Enter aby zapisaƒá, Escape aby anulowaƒá"
        tk.Label(help_frame, text=help_text, font=("Arial", 8), fg="gray").pack()

        # Wy≈õrodkuj okno
        editor.update_idletasks()
        x = (editor.winfo_screenwidth() // 2) - (editor.winfo_width() // 2)
        y = (editor.winfo_screenheight() // 2) - (editor.winfo_height() // 2)
        editor.geometry(f"+{x}+{y}")


if __name__ == "__main__":
    root = tk.Tk()
    app = DataWarehouseApp(root)
    root.mainloop()